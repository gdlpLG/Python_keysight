from tkinter import *from tkinter import filedialogimport tkinter.ttk as ttkimport pandas as pdimport matplotlib.pyplot as pltimport pyvisa, pyarbtoolsrm = pyvisa.ResourceManager()def status():    # Statut AWG    try:        awg = rm.open_resource(Adr_AWG.get())        awg.write("*CLS")        print(awg.query("*IDN?"))        status_AWG.set('Connecté')        Label_Status_AWG.config(bg='green')        awg.clear()        awg.close()    except:        status_AWG.set('Non connecté')        Label_Status_AWG.config(bg='red')        print('erreur AWG')        pass    # Statut SA    try:        SA = rm.open_resource(Adr_SA.get(), access_mode=0)        SA.timeout = 10000        SA.write("*CLS")        print(SA.query("*IDN?"))        status_SA.set('Connecté')        Label_Status_SA.config(bg='green')        SA.clear()        SA.close()    except:        status_SA.set('Non connecté')        Label_Status_AWG.config(bg='red')        print('erreur SA')        passdef sampling():    # Génération échantillon AWG    try:        if float(Delta_init.get()) <= 30e6:            Adr_IP_AWG = Adr_AWG.get().split('::')            awg = pyarbtools.instruments.VSG(Adr_IP_AWG[1], reset=True)            # Signal generator configuration variables            amplitude = Pow.get()            sampleRate = 75e6  # Arb Sample Clock Max = 75 MHz (option 653).            freq = Fc.get()            # Configure signal generator            awg.configure(rfState=1, modState=1, amp=int(amplitude), fs=sampleRate, cf=float(freq), alcState=0)            awg.sanity_check()            awg.err_check()            # Waveform definition variables - max = 74.89 MHz            # toneSpacing * numTones < sampleRate            name = 'MULTITONE'            numTones = 2            toneSpacing = Delta_init.get()  # numTones = 2 - toneSpacing max = 30 MHz            # Create waveform            iq = pyarbtools.wfmBuilder.multitone_generator(fs=awg.fs, spacing=float(toneSpacing), num=numTones,                                                           phase='zero', cf=awg.cf, wfmFormat='iq')            # Download and play waveform            awg.download_wfm(iq, wfmID=name)            awg.play(name)            # Check for errors and gracefully disconnect            awg.err_check()            awg.disconnect()        else:            print('erreur : deltaF trop élevé')            pass    except:        print('erreur génération AWG')        pass    # Affichage échantillon SA    try:        SA = rm.open_resource(Adr_SA.get(), access_mode=0)        SA.timeout = 10000        SA.write("SYST:PRES;*OPC?")        SA.read()        # print("Preset complete, *OPC? returned : " + SA.read())        freq = float(Fc.get()) + float(Delta_init.get()) / 2        span = 5 * float(Delta_init.get())        SA.write("SENS:FREQ:CENTer " + str(freq))        window.after(500)        SA.write("SENS:FREQ:SPAN " + str(span))        SA.write("SENS:BAND:RES:AUTO ON")        SA.write("SENS:BAND:VID:RAT 1")        SA.clear()        SA.close()    except:        print('erreur génération SA')        passdef meas():    try:        # Définition de la liste        nb = (float(Delta_stop.get()) - float(Delta_init.get())) / float(Delta_step.get())        i = 0        s = float(Delta_init.get())        delta_liste = [float(Delta_init.get())]        while i != nb:            s = s + float(Delta_step.get())            delta_liste.append(s)            i += 1        print(delta_liste)        # Barre de progression        currentValue = 0        maxValue = 4 * (nb+1)        progressbar["value"] = currentValue        progressbar["maximum"] = maxValue        # Connexion AWG        Adr_IP_AWG = Adr_AWG.get().split('::')        awg = pyarbtools.instruments.VSG(Adr_IP_AWG[1], reset=True)        # Configuration AWG        amplitude = Pow.get()        sampleRate = 75e6  # Arb Sample Clock Max = 75 MHz (option 653).        freq = Fc.get()        name = 'MULTITONE'        awg.configure(rfState=1, modState=1, amp=int(amplitude), fs=sampleRate, cf=float(freq), alcState=0)        # awg.sanity_check()        awg.err_check()        # Connexion SA        SA = rm.open_resource(Adr_SA.get(), access_mode=0)        SA.timeout = 10000        SA.write("SYST:PRES;*OPC?")        SA.read()        # Configuration SA        SA.write("SENS:FREQ:SPAN 100kHz")        SA.write("SENS:BAND:RES:AUTO ON")        SA.write("SENS:BAND:VID:RAT 1")        SA.write("CALC:MARK:MODE POS")        #SA.write('INIT:CONT OFF')        # Création de la dataframe        df = pd.DataFrame(index=range(0, len(delta_liste)), columns=range(0, 4), dtype=float)        id_l = 0        id_c = 0        # Mesure pour chaque delta_f de la liste        for delta_f in delta_liste:            # Génération du signal            # Create waveform            iq = pyarbtools.wfmBuilder.multitone_generator(fs=awg.fs, spacing=float(delta_f), num=2,                                                           phase='zero', cf=awg.cf, wfmFormat='iq')            # Download and play waveform            awg.download_wfm(iq, wfmID=name)            awg.play(name)            # Définition des tons            f1 = float(freq) - delta_f            f2 = float(freq)            f3 = float(freq) + delta_f            f4 = float(freq) + 2 * delta_f            list_f = [f1, f2, f3, f4]            # Mesure de chaque ton            SA.write("INIT:IMM;*WAI")            for tone in list_f:                SA.write("SENS:FREQ:CENTer " + str(tone))                window.after(500) # INDISPENSABLE POUR QUE CELA FONCTIONNE                SA.write("CALC:MARK:MAX")                window.after(500)                SA.write("CALC:MARK:X?")                peak_freq = SA.read()                print("Marker Peak = " + peak_freq)                SA.write("CALC:MARK:Y?")                peak_level = SA.read()                # print("Marker Peak = " + peak_level)                # Remplissage de la DataFrame                df[id_c][id_l] = peak_level                id_c += 1                currentValue = currentValue + 1                progressbar.after(500, progress(currentValue))                progressbar.update()            id_c = 0            id_l += 1            SA.write('INIT:CONT ON')        # Plot de la courbe        # x = df.index.values        # y = df[0]        # plt.plot(x, y)        # plt.show()        # Déconnexion AWG        awg.err_check()        awg.disconnect()        # Déconnexion SA        SA.clear()        SA.close()        '''A la fin du programme, afficher les courbes dans une nouvelle fenêtre avec Matplotlib'''        # Création du fichier EXCEL (installer openpyxl)        # df.to_excel(Destination.get() + '/PyProg_6.xlsx')        # df.to_csv(Destination.get() + '/PyProg_6.xlsx', index = False)    except:        print('erreur programme')        passdef save():    window.directory = filedialog.askdirectory()    Destination.delete(0,'end')    Destination.insert(0, window.directory)def progress(currentValue):    progressbar["value"]=currentValue# FENETRESwindow = Tk()# VARIABLESstatus_AWG = StringVar()status_SA = StringVar()status_AWG.set('Non connecté')status_SA.set('Non connecté')# PERSONNALISATIONwindow.title("2-tone spacing - AWG")window.resizable(False, False)window.geometry("720x480")# window.minsize(600, 450)window.iconbitmap("logoACTIA.ico")# window.config(bg='#41B77F')# CADRES ETIQUETESframe1 = LabelFrame(window, text='Instruments', width=680, height=130)frame2 = LabelFrame(window, text='Paramètres', width=680, height=220)frame3 = Frame(window, width=680, height=80, bg='')# ETIQUETTESLabel_Adr_AWG = Label(frame1, text='Générateur : ')Label_Status_AWG = Label(frame1, textvariable=status_AWG, bg='red', fg='white')Label_Adr_SA = Label(frame1, text='Analyseur de spectre : ')Label_Status_SA = Label(frame1, textvariable=status_SA, bg='red', fg='white')Label_Fc = Label(frame2, text='Fréquence centrale : ')Label_unit_Fc = Label(frame2, text=' Hz')Label_Pow = Label(frame2, text='Puissance : ')Label_unit_Pow = Label(frame2, text=' dBm')Label_delta_1 = Label(frame2, text='Intervalle initial : ')Label_delta_2 = Label(frame2, text=' Hz')Label_delta_3 = Label(frame2, text='Intervalle final : ')Label_delta_4 = Label(frame2, text=' Hz')Label_delta_5 = Label(frame2, text='Pas : ')Label_delta_6 = Label(frame2, text=' Hz')# ENTREESAdr_AWG = Entry(frame1, width=45)Adr_AWG.insert(0, 'TCPIP0::169.254.212.206::inst0::INSTR')Adr_SA = Entry(frame1, width=45)Adr_SA.insert(0, 'USB0::0x2A8D::0x0B0B::MY52221305::0::INSTR')Fc = Entry(frame2, width=10)Fc.insert(0, '2e9')Pow = Entry(frame2, width=10)Pow.insert(0, '-30')Delta_init = Entry(frame2, width=10)Delta_init.insert(0, '1e6')Delta_stop = Entry(frame2, width=10)Delta_stop.insert(0, '2e6')Delta_step = Entry(frame2, width=10)Delta_step.insert(0, '1e6')Destination = Entry(frame3, width=70)Destination.insert(0, 'C:/Users/cl.mallet/Desktop')# BOUTONSBtn_instr = Button(frame1, text="Connexion", width=10, command=status)Btn_sample = Button(frame2, text="Test", width=10, command=sampling)Btn_dest = Button(frame3, text='Destination', width=10, command=save)Btn_Mesure = Button(frame3, text='Mesurer', width=10, bg='#00A040', command=meas)Btn_Q = Button(frame3, text='Quitter', width=10, command=quit)# BARRE DE PROGRESSIONprogressbar = ttk.Progressbar(frame3, orient="horizontal", length=300, mode="determinate")# POSITIONNEMENT WIDGETSframe1.grid(row=0, column=0, padx=20, pady=5)frame1.grid_propagate(0)frame1.grid_rowconfigure(2, weight=1)Label_Adr_AWG.grid(row=0, column=0, padx=10, pady=1, sticky=W)Adr_AWG.grid(row=0, column=1, padx=10, pady=1)Label_Status_AWG.grid(row=0, column=2, padx=10, pady=1)Label_Adr_SA.grid(row=1, column=0, padx=10, pady=1, sticky=W)Adr_SA.grid(row=1, column=1, padx=10, pady=1)Label_Status_SA.grid(row=1, column=2, padx=10, pady=1)Btn_instr.grid(row=2, column=0, padx=10, pady=10, sticky=W + S)frame2.grid(row=1, column=0, padx=20, pady=5)frame2.grid_propagate(0)frame2.grid_rowconfigure(5, weight=1)Label_Fc.grid(row=0, column=0, padx=10, pady=1, sticky=W)Fc.grid(row=0, column=1, padx=10, pady=1)Label_unit_Fc.grid(row=0, column=2, sticky=W)Label_Pow.grid(row=1, column=0, padx=10, pady=1, sticky=W)Pow.grid(row=1, column=1, padx=10, pady=1)Label_unit_Pow.grid(row=1, column=2, sticky=W)Label_delta_1.grid(row=2, column=0, padx=10, pady=1, sticky=W)Delta_init.grid(row=2, column=1, padx=10, pady=1, sticky=W)Label_delta_2.grid(row=2, column=2, sticky=W)Label_delta_3.grid(row=3, column=0, padx=10, pady=1, sticky=W)Delta_stop.grid(row=3, column=1, padx=10, pady=1, sticky=W)Label_delta_4.grid(row=3, column=2, sticky=W)Label_delta_5.grid(row=4, column=0, padx=10, pady=1, sticky=W)Delta_step.grid(row=4, column=1, padx=10, pady=1, sticky=W)Label_delta_6.grid(row=4, column=2, sticky=W)Btn_sample.grid(row=5, column=0, padx=10, pady=10, sticky=W + S)frame3.grid(row=2, column=0, padx=20, pady=5)frame3.grid_propagate(0)frame3.grid_columnconfigure(1, weight=1)frame3.grid_rowconfigure(1, weight=1)Btn_dest.grid(row=0, column=0, padx=10, sticky=W)Destination.grid(row=0, column=1, padx=10, sticky=W)Btn_Mesure.grid(row=1, column=0, padx=10, sticky=W)progressbar.grid(row=1, column=1, padx=10, sticky=W)Btn_Q.grid(row=1, column=2, padx=10, sticky=E)# GUIwindow.mainloop()''' Si je veux aligner la ProgressBar avec l'entrée Destination je devrai tout mettre dans la même frame'''